var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', function () {
    /** now we can use gapi.client */
    gapi.client.load('drive', 'v3', function () {
        /** now we can use gapi.client.drive */
        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        var client_id = '<<PUT YOUR CLIENT ID HERE>>';
        var scope = [
            /** View and manage the files in your Google Drive */
            'https://www.googleapis.com/auth/drive',
            /** View and manage its own configuration data in your Google Drive */
            'https://www.googleapis.com/auth/drive.appdata',
            /** View and manage Google Drive files and folders that you have opened or created with this app */
            'https://www.googleapis.com/auth/drive.file',
            /** View and manage metadata of files in your Google Drive */
            'https://www.googleapis.com/auth/drive.metadata',
            /** View metadata for files in your Google Drive */
            'https://www.googleapis.com/auth/drive.metadata.readonly',
            /** View the photos, videos and albums in your Google Photos */
            'https://www.googleapis.com/auth/drive.photos.readonly',
            /** View the files in your Google Drive */
            'https://www.googleapis.com/auth/drive.readonly',
            /** Modify your Google Apps Script scripts' behavior */
            'https://www.googleapis.com/auth/drive.scripts',
        ];
        var immediate = true;
        gapi.auth.authorize({ client_id: client_id, scope: scope, immediate: immediate }, function (authResult) {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            }
            else {
                /** handle authorization error */
            }
        });
        run();
    });
    function run() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    /** Gets information about the user, the user's Drive, and system capabilities. */
                    return [4 /*yield*/, gapi.client.drive.about.get({})];
                    case 1:
                        /** Gets information about the user, the user's Drive, and system capabilities. */
                        _a.sent();
                        /** Gets the starting pageToken for listing future changes. */
                        return [4 /*yield*/, gapi.client.drive.changes.getStartPageToken({
                                supportsTeamDrives: true,
                                teamDriveId: "teamDriveId",
                            })];
                    case 2:
                        /** Gets the starting pageToken for listing future changes. */
                        _a.sent();
                        /** Lists the changes for a user or Team Drive. */
                        return [4 /*yield*/, gapi.client.drive.changes.list({
                                includeCorpusRemovals: true,
                                includeRemoved: true,
                                includeTeamDriveItems: true,
                                pageSize: 4,
                                pageToken: "pageToken",
                                restrictToMyDrive: true,
                                spaces: "spaces",
                                supportsTeamDrives: true,
                                teamDriveId: "teamDriveId",
                            })];
                    case 3:
                        /** Lists the changes for a user or Team Drive. */
                        _a.sent();
                        /** Subscribes to changes for a user. */
                        return [4 /*yield*/, gapi.client.drive.changes.watch({
                                includeCorpusRemovals: true,
                                includeRemoved: true,
                                includeTeamDriveItems: true,
                                pageSize: 4,
                                pageToken: "pageToken",
                                restrictToMyDrive: true,
                                spaces: "spaces",
                                supportsTeamDrives: true,
                                teamDriveId: "teamDriveId",
                            })];
                    case 4:
                        /** Subscribes to changes for a user. */
                        _a.sent();
                        /** Stop watching resources through this channel */
                        return [4 /*yield*/, gapi.client.drive.channels.stop({})];
                    case 5:
                        /** Stop watching resources through this channel */
                        _a.sent();
                        /** Creates a new comment on a file. */
                        return [4 /*yield*/, gapi.client.drive.comments.create({
                                fileId: "fileId",
                            })];
                    case 6:
                        /** Creates a new comment on a file. */
                        _a.sent();
                        /** Deletes a comment. */
                        return [4 /*yield*/, gapi.client.drive.comments.delete({
                                commentId: "commentId",
                                fileId: "fileId",
                            })];
                    case 7:
                        /** Deletes a comment. */
                        _a.sent();
                        /** Gets a comment by ID. */
                        return [4 /*yield*/, gapi.client.drive.comments.get({
                                commentId: "commentId",
                                fileId: "fileId",
                                includeDeleted: true,
                            })];
                    case 8:
                        /** Gets a comment by ID. */
                        _a.sent();
                        /** Lists a file's comments. */
                        return [4 /*yield*/, gapi.client.drive.comments.list({
                                fileId: "fileId",
                                includeDeleted: true,
                                pageSize: 3,
                                pageToken: "pageToken",
                                startModifiedTime: "startModifiedTime",
                            })];
                    case 9:
                        /** Lists a file's comments. */
                        _a.sent();
                        /** Updates a comment with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.comments.update({
                                commentId: "commentId",
                                fileId: "fileId",
                            })];
                    case 10:
                        /** Updates a comment with patch semantics. */
                        _a.sent();
                        /** Creates a copy of a file and applies any requested updates with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.files.copy({
                                fileId: "fileId",
                                ignoreDefaultVisibility: true,
                                keepRevisionForever: true,
                                ocrLanguage: "ocrLanguage",
                                supportsTeamDrives: true,
                            })];
                    case 11:
                        /** Creates a copy of a file and applies any requested updates with patch semantics. */
                        _a.sent();
                        /** Creates a new file. */
                        return [4 /*yield*/, gapi.client.drive.files.create({
                                ignoreDefaultVisibility: true,
                                keepRevisionForever: true,
                                ocrLanguage: "ocrLanguage",
                                supportsTeamDrives: true,
                                useContentAsIndexableText: true,
                            })];
                    case 12:
                        /** Creates a new file. */
                        _a.sent();
                        /**
                         * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a Team Drive the user must be an organizer on the
                         * parent. If the target is a folder, all descendants owned by the user are also deleted.
                         */
                        return [4 /*yield*/, gapi.client.drive.files.delete({
                                fileId: "fileId",
                                supportsTeamDrives: true,
                            })];
                    case 13:
                        /**
                         * Permanently deletes a file owned by the user without moving it to the trash. If the file belongs to a Team Drive the user must be an organizer on the
                         * parent. If the target is a folder, all descendants owned by the user are also deleted.
                         */
                        _a.sent();
                        /** Permanently deletes all of the user's trashed files. */
                        return [4 /*yield*/, gapi.client.drive.files.emptyTrash({})];
                    case 14:
                        /** Permanently deletes all of the user's trashed files. */
                        _a.sent();
                        /** Exports a Google Doc to the requested MIME type and returns the exported content. Please note that the exported content is limited to 10MB. */
                        return [4 /*yield*/, gapi.client.drive.files.export({
                                fileId: "fileId",
                                mimeType: "mimeType",
                            })];
                    case 15:
                        /** Exports a Google Doc to the requested MIME type and returns the exported content. Please note that the exported content is limited to 10MB. */
                        _a.sent();
                        /** Generates a set of file IDs which can be provided in create requests. */
                        return [4 /*yield*/, gapi.client.drive.files.generateIds({
                                count: 1,
                                space: "space",
                            })];
                    case 16:
                        /** Generates a set of file IDs which can be provided in create requests. */
                        _a.sent();
                        /** Gets a file's metadata or content by ID. */
                        return [4 /*yield*/, gapi.client.drive.files.get({
                                acknowledgeAbuse: true,
                                fileId: "fileId",
                                supportsTeamDrives: true,
                            })];
                    case 17:
                        /** Gets a file's metadata or content by ID. */
                        _a.sent();
                        /** Lists or searches files. */
                        return [4 /*yield*/, gapi.client.drive.files.list({
                                corpora: "corpora",
                                corpus: "corpus",
                                includeTeamDriveItems: true,
                                orderBy: "orderBy",
                                pageSize: 5,
                                pageToken: "pageToken",
                                q: "q",
                                spaces: "spaces",
                                supportsTeamDrives: true,
                                teamDriveId: "teamDriveId",
                            })];
                    case 18:
                        /** Lists or searches files. */
                        _a.sent();
                        /** Updates a file's metadata and/or content with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.files.update({
                                addParents: "addParents",
                                fileId: "fileId",
                                keepRevisionForever: true,
                                ocrLanguage: "ocrLanguage",
                                removeParents: "removeParents",
                                supportsTeamDrives: true,
                                useContentAsIndexableText: true,
                            })];
                    case 19:
                        /** Updates a file's metadata and/or content with patch semantics. */
                        _a.sent();
                        /** Subscribes to changes to a file */
                        return [4 /*yield*/, gapi.client.drive.files.watch({
                                acknowledgeAbuse: true,
                                fileId: "fileId",
                                supportsTeamDrives: true,
                            })];
                    case 20:
                        /** Subscribes to changes to a file */
                        _a.sent();
                        /** Creates a permission for a file or Team Drive. */
                        return [4 /*yield*/, gapi.client.drive.permissions.create({
                                emailMessage: "emailMessage",
                                fileId: "fileId",
                                sendNotificationEmail: true,
                                supportsTeamDrives: true,
                                transferOwnership: true,
                                useDomainAdminAccess: true,
                            })];
                    case 21:
                        /** Creates a permission for a file or Team Drive. */
                        _a.sent();
                        /** Deletes a permission. */
                        return [4 /*yield*/, gapi.client.drive.permissions.delete({
                                fileId: "fileId",
                                permissionId: "permissionId",
                                supportsTeamDrives: true,
                                useDomainAdminAccess: true,
                            })];
                    case 22:
                        /** Deletes a permission. */
                        _a.sent();
                        /** Gets a permission by ID. */
                        return [4 /*yield*/, gapi.client.drive.permissions.get({
                                fileId: "fileId",
                                permissionId: "permissionId",
                                supportsTeamDrives: true,
                                useDomainAdminAccess: true,
                            })];
                    case 23:
                        /** Gets a permission by ID. */
                        _a.sent();
                        /** Lists a file's or Team Drive's permissions. */
                        return [4 /*yield*/, gapi.client.drive.permissions.list({
                                fileId: "fileId",
                                pageSize: 2,
                                pageToken: "pageToken",
                                supportsTeamDrives: true,
                                useDomainAdminAccess: true,
                            })];
                    case 24:
                        /** Lists a file's or Team Drive's permissions. */
                        _a.sent();
                        /** Updates a permission with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.permissions.update({
                                fileId: "fileId",
                                permissionId: "permissionId",
                                removeExpiration: true,
                                supportsTeamDrives: true,
                                transferOwnership: true,
                                useDomainAdminAccess: true,
                            })];
                    case 25:
                        /** Updates a permission with patch semantics. */
                        _a.sent();
                        /** Creates a new reply to a comment. */
                        return [4 /*yield*/, gapi.client.drive.replies.create({
                                commentId: "commentId",
                                fileId: "fileId",
                            })];
                    case 26:
                        /** Creates a new reply to a comment. */
                        _a.sent();
                        /** Deletes a reply. */
                        return [4 /*yield*/, gapi.client.drive.replies.delete({
                                commentId: "commentId",
                                fileId: "fileId",
                                replyId: "replyId",
                            })];
                    case 27:
                        /** Deletes a reply. */
                        _a.sent();
                        /** Gets a reply by ID. */
                        return [4 /*yield*/, gapi.client.drive.replies.get({
                                commentId: "commentId",
                                fileId: "fileId",
                                includeDeleted: true,
                                replyId: "replyId",
                            })];
                    case 28:
                        /** Gets a reply by ID. */
                        _a.sent();
                        /** Lists a comment's replies. */
                        return [4 /*yield*/, gapi.client.drive.replies.list({
                                commentId: "commentId",
                                fileId: "fileId",
                                includeDeleted: true,
                                pageSize: 4,
                                pageToken: "pageToken",
                            })];
                    case 29:
                        /** Lists a comment's replies. */
                        _a.sent();
                        /** Updates a reply with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.replies.update({
                                commentId: "commentId",
                                fileId: "fileId",
                                replyId: "replyId",
                            })];
                    case 30:
                        /** Updates a reply with patch semantics. */
                        _a.sent();
                        /** Permanently deletes a revision. This method is only applicable to files with binary content in Drive. */
                        return [4 /*yield*/, gapi.client.drive.revisions.delete({
                                fileId: "fileId",
                                revisionId: "revisionId",
                            })];
                    case 31:
                        /** Permanently deletes a revision. This method is only applicable to files with binary content in Drive. */
                        _a.sent();
                        /** Gets a revision's metadata or content by ID. */
                        return [4 /*yield*/, gapi.client.drive.revisions.get({
                                acknowledgeAbuse: true,
                                fileId: "fileId",
                                revisionId: "revisionId",
                            })];
                    case 32:
                        /** Gets a revision's metadata or content by ID. */
                        _a.sent();
                        /** Lists a file's revisions. */
                        return [4 /*yield*/, gapi.client.drive.revisions.list({
                                fileId: "fileId",
                                pageSize: 2,
                                pageToken: "pageToken",
                            })];
                    case 33:
                        /** Lists a file's revisions. */
                        _a.sent();
                        /** Updates a revision with patch semantics. */
                        return [4 /*yield*/, gapi.client.drive.revisions.update({
                                fileId: "fileId",
                                revisionId: "revisionId",
                            })];
                    case 34:
                        /** Updates a revision with patch semantics. */
                        _a.sent();
                        /** Creates a new Team Drive. */
                        return [4 /*yield*/, gapi.client.drive.teamdrives.create({
                                requestId: "requestId",
                            })];
                    case 35:
                        /** Creates a new Team Drive. */
                        _a.sent();
                        /** Permanently deletes a Team Drive for which the user is an organizer. The Team Drive cannot contain any untrashed items. */
                        return [4 /*yield*/, gapi.client.drive.teamdrives.delete({
                                teamDriveId: "teamDriveId",
                            })];
                    case 36:
                        /** Permanently deletes a Team Drive for which the user is an organizer. The Team Drive cannot contain any untrashed items. */
                        _a.sent();
                        /** Gets a Team Drive's metadata by ID. */
                        return [4 /*yield*/, gapi.client.drive.teamdrives.get({
                                teamDriveId: "teamDriveId",
                                useDomainAdminAccess: true,
                            })];
                    case 37:
                        /** Gets a Team Drive's metadata by ID. */
                        _a.sent();
                        /** Lists the user's Team Drives. */
                        return [4 /*yield*/, gapi.client.drive.teamdrives.list({
                                pageSize: 1,
                                pageToken: "pageToken",
                                q: "q",
                                useDomainAdminAccess: true,
                            })];
                    case 38:
                        /** Lists the user's Team Drives. */
                        _a.sent();
                        /** Updates a Team Drive's metadata */
                        return [4 /*yield*/, gapi.client.drive.teamdrives.update({
                                teamDriveId: "teamDriveId",
                            })];
                    case 39:
                        /** Updates a Team Drive's metadata */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
});
