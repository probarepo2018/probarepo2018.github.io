var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/* This is stub file for gapi.client.{{=it.name}} definition tests */
/* IMPORTANT.
* This file was automatically generated by https://github.com/Bolisov/google-api-typings-generator. Please do not edit it manually.
* In case of any problems please post issue to https://github.com/Bolisov/google-api-typings-generator
**/
gapi.load('client', function () {
    /** now we can use gapi.client */
    gapi.client.load('people', 'v1', function () {
        /** now we can use gapi.client.people */
        /** don't forget to authenticate your client before sending any request to resources: */
        /** declare client_id registered in Google Developers Console */
        var client_id = '<<PUT YOUR CLIENT ID HERE>>';
        var scope = [
            /** Manage your contacts */
            'https://www.googleapis.com/auth/contacts',
            /** View your contacts */
            'https://www.googleapis.com/auth/contacts.readonly',
            /** Know the list of people in your circles, your age range, and language */
            'https://www.googleapis.com/auth/plus.login',
            /** View your street addresses */
            'https://www.googleapis.com/auth/user.addresses.read',
            /** View your complete date of birth */
            'https://www.googleapis.com/auth/user.birthday.read',
            /** View your email addresses */
            'https://www.googleapis.com/auth/user.emails.read',
            /** View your phone numbers */
            'https://www.googleapis.com/auth/user.phonenumbers.read',
            /** View your email address */
            'https://www.googleapis.com/auth/userinfo.email',
            /** View your basic profile info */
            'https://www.googleapis.com/auth/userinfo.profile',
        ];
        var immediate = true;
        gapi.auth.authorize({ client_id: client_id, scope: scope, immediate: immediate }, function (authResult) {
            if (authResult && !authResult.error) {
                /** handle succesfull authorization */
                run();
            }
            else {
                /** handle authorization error */
            }
        });
        run();
    });
    function run() {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    /**
                     * Get a list of contact groups owned by the authenticated user by specifying
                     * a list of contact group resource names.
                     */
                    return [4 /*yield*/, gapi.client.contactGroups.batchGet({
                            maxMembers: 1,
                            resourceNames: "resourceNames",
                        })];
                    case 1:
                        /**
                         * Get a list of contact groups owned by the authenticated user by specifying
                         * a list of contact group resource names.
                         */
                        _a.sent();
                        /** Create a new contact group owned by the authenticated user. */
                        return [4 /*yield*/, gapi.client.contactGroups.create({})];
                    case 2:
                        /** Create a new contact group owned by the authenticated user. */
                        _a.sent();
                        /**
                         * Delete an existing contact group owned by the authenticated user by
                         * specifying a contact group resource name.
                         */
                        return [4 /*yield*/, gapi.client.contactGroups.delete({
                                deleteContacts: true,
                                resourceName: "resourceName",
                            })];
                    case 3:
                        /**
                         * Delete an existing contact group owned by the authenticated user by
                         * specifying a contact group resource name.
                         */
                        _a.sent();
                        /**
                         * Get a specific contact group owned by the authenticated user by specifying
                         * a contact group resource name.
                         */
                        return [4 /*yield*/, gapi.client.contactGroups.get({
                                maxMembers: 1,
                                resourceName: "resourceName",
                            })];
                    case 4:
                        /**
                         * Get a specific contact group owned by the authenticated user by specifying
                         * a contact group resource name.
                         */
                        _a.sent();
                        /**
                         * List all contact groups owned by the authenticated user. Members of the
                         * contact groups are not populated.
                         */
                        return [4 /*yield*/, gapi.client.contactGroups.list({
                                pageSize: 1,
                                pageToken: "pageToken",
                                syncToken: "syncToken",
                            })];
                    case 5:
                        /**
                         * List all contact groups owned by the authenticated user. Members of the
                         * contact groups are not populated.
                         */
                        _a.sent();
                        /**
                         * Update the name of an existing contact group owned by the authenticated
                         * user.
                         */
                        return [4 /*yield*/, gapi.client.contactGroups.update({
                                resourceName: "resourceName",
                            })];
                    case 6:
                        /**
                         * Update the name of an existing contact group owned by the authenticated
                         * user.
                         */
                        _a.sent();
                        /** Create a new contact and return the person resource for that contact. */
                        return [4 /*yield*/, gapi.client.people.createContact({
                                parent: "parent",
                            })];
                    case 7:
                        /** Create a new contact and return the person resource for that contact. */
                        _a.sent();
                        /** Delete a contact person. Any non-contact data will not be deleted. */
                        return [4 /*yield*/, gapi.client.people.deleteContact({
                                resourceName: "resourceName",
                            })];
                    case 8:
                        /** Delete a contact person. Any non-contact data will not be deleted. */
                        _a.sent();
                        /**
                         * Provides information about a person by specifying a resource name. Use
                         * `people/me` to indicate the authenticated user.
                         * <br>
                         * The request throws a 400 error if 'personFields' is not specified.
                         */
                        return [4 /*yield*/, gapi.client.people.get({
                                personFields: "personFields",
                                "requestMask.includeField": "requestMask.includeField",
                                resourceName: "resourceName",
                            })];
                    case 9:
                        /**
                         * Provides information about a person by specifying a resource name. Use
                         * `people/me` to indicate the authenticated user.
                         * <br>
                         * The request throws a 400 error if 'personFields' is not specified.
                         */
                        _a.sent();
                        /**
                         * Provides information about a list of specific people by specifying a list
                         * of requested resource names. Use `people/me` to indicate the authenticated
                         * user.
                         * <br>
                         * The request throws a 400 error if 'personFields' is not specified.
                         */
                        return [4 /*yield*/, gapi.client.people.getBatchGet({
                                personFields: "personFields",
                                "requestMask.includeField": "requestMask.includeField",
                                resourceNames: "resourceNames",
                            })];
                    case 10:
                        /**
                         * Provides information about a list of specific people by specifying a list
                         * of requested resource names. Use `people/me` to indicate the authenticated
                         * user.
                         * <br>
                         * The request throws a 400 error if 'personFields' is not specified.
                         */
                        _a.sent();
                        /**
                         * Update contact data for an existing contact person. Any non-contact data
                         * will not be modified.
                         *
                         * The request throws a 400 error if `updatePersonFields` is not specified.
                         * <br>
                         * The request throws a 400 error if `person.metadata.sources` is not
                         * specified for the contact to be updated.
                         * <br>
                         * The request throws a 412 error if `person.metadata.sources.etag` is
                         * different than the contact's etag, which indicates the contact has changed
                         * since its data was read. Clients should get the latest person and re-apply
                         * their updates to the latest person.
                         */
                        return [4 /*yield*/, gapi.client.people.updateContact({
                                resourceName: "resourceName",
                                updatePersonFields: "updatePersonFields",
                            })];
                    case 11:
                        /**
                         * Update contact data for an existing contact person. Any non-contact data
                         * will not be modified.
                         *
                         * The request throws a 400 error if `updatePersonFields` is not specified.
                         * <br>
                         * The request throws a 400 error if `person.metadata.sources` is not
                         * specified for the contact to be updated.
                         * <br>
                         * The request throws a 412 error if `person.metadata.sources.etag` is
                         * different than the contact's etag, which indicates the contact has changed
                         * since its data was read. Clients should get the latest person and re-apply
                         * their updates to the latest person.
                         */
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
});
